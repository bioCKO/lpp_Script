#!/bin/bash

# ---- error handling
set -o errexit;
set -o posix;
set -o pipefail;
set -o errtrace;
unexpected_error() {
    local errstat=$?
    echo "${g_prog:-$(basename $0)}: Error! Encountered unexpected error at 'line $(caller)', bailing out..." 1>&2
    exit $errstat;
}
trap unexpected_error ERR;

function bn() { local name="${1##*/}"; echo "${name%$2}"; }
function dn(){ local d="${1%${1##*/}}"; [[ x"${d:=./}" != x"/" ]] && d=${d%?};echo "$d";}

g_prog=$(bn "$0");
g_progdir=$(dn "$0");
#g_progdir_abs=$(cd "$g_progdir" && pwd -P)
g_progdir_abs=$(cd $(dn $(readlink -f "$0")) && pwd -P)

# ----- main

# Define the runtime subcommand dependencies
__SMRTPRIVATE_EXEPATH__samtools="$g_progdir_abs/../../../../private/thirdparty/samtools/samtools_1.3.1/binwrap/samtools"
__SMRTPRIVATE_EXEPATH__sawriter="$g_progdir_abs/../../../../private/pacbio/blasr/binwrap/sawriter"
__SMRTPRIVATE_EXEPATH__gmap_build="$g_progdir_abs/../../../../private/thirdparty/gmap/gmap_2016-11-07/binwrap/gmap_build"


# Determine the path from the subcommand dependencies above.
# Ideally we would just pass the environment variable directly to the program
# and it would pick up the location from the environment instead of the path,
# but for now the program expects the dependencies to be on the path.
g_path="/usr/bin:/bin"
for i in ${!__SMRTPRIVATE_EXEPATH__*}; do
    parentdir=$(dirname "${!i}")
    g_path="$g_path:$parentdir"
done
g_path=${g_path#:}


PATH="$g_path" \
JAVA_HOME="$g_progdir_abs/../../../thirdparty/jre/jre_8u71" \
   exec "$g_progdir_abs/../bin/fasta-to-gmap-reference" ${1+"$@"}
